// SetParameterGeneratorForCode


class MainForm extends VCLForm {
	
	var path = WScript.Path + 'scripts\Tool\';
	
	function MainForm(main, setting) {

		this.loadFromFile(new File(this.path + 'SetParameterGeneratorForCode.dfm'));
		this.main = main;

		// 設定読み込み
		fromSetting(setting);
	}

	// フォーム上の設定値をSettingから設定
	function fromSetting(setting) {
		this.left = setting.windowLeft;
		this.top = setting.windowTop;
		this.txtSource.text = setting.source;
		this.txtTables.text = setting.tables;
		this.txtComment.text = setting.comment;
	}
	
	// フォーム上の設定値をSettingにコンバート	
	function toSetting() {
		var setting = new Setting();
		setting.windowLeft = this.left;
		setting.windowTop = this.top;
		setting.tables = this.txtTables.text;
		setting.source = this.txtSource.text;
		setting.comment = this.txtComment.text;
		return setting;
	}

	function chkChange(sender) {
		// NULLにチェック状態で、デフォルト値の使用可否を制御する
		this.edtDefaultValue.enabled = !sender.checked;
	}

}

class Setting {

	var path = WScript.Path + 'scripts\Tool\';

	var windowLeft;
	var windowTop;
	var hideDialog;
	var existSection;
	var tables;
	
	function loadSetting() {
		// iniファイル読み込み
		var ini = new Ini(new File(this.path + 'SetParameterGeneratorForCode.ini'));
		this.windowLeft = ini.read('Window','Left',100);
		this.windowTop = ini.read('Window','Top',100);
		this.existSection = ini.read('SetParameterGeneratorForCode','ExistSection', 0);
		this.tables = ini.read('SetParameterGeneratorForCode','tables', '');
		this.source = ini.read('SetParameterGeneratorForCode','Source', 'cmd.Parameters.Add(Me.CreateParameter("@$Name", SqlDbType.$Type, entity.$Name)) ' + "'" + '$Comment');
		this.comment = ini.read('SetParameterGeneratorForCode', 'Comment', "'");
		return this;
	}
	
	function saveSetting() {
		var ini = new Ini(new File(this.path + 'SetParameterGeneratorForCode.ini'));
		ini.write('Window','Left',this.windowLeft);
		ini.write('Window','Top',this.windowTop);
		ini.write('SetParameterGeneratorForCode','ExistSection', this.existSection);
		ini.write('SetParameterGeneratorForCode','tables', this.tables);
		ini.write('SetParameterGeneratorForCode','Source', this.source);
		ini.write('SetParameterGeneratorForCode','Comment', this.comment);
		ini.update();	// iniファイル更新
	}
}

class Generator() {
	
	function process() {
		var setting = new Setting().loadSetting();
		if (setting.hideDialog) {
			// HideDialog設定がtrueならダイアログを出さずに出力する
			generate(setting.existSection, setting.tables, setting.defaultValue, setting.defaultNull);
		} else {
			var frm = new MainForm(true,setting);
			if (frm.showModal() === 1) {
				// 出力ボタンが押されてfrmを閉じたなら、設定を保存し出力する
				setting = frm.toSetting();
				setting.saveSetting();
				generate(setting.source, setting.tables, setting.comment);
			}
		}
	}
	
	function generate(source, tables, comment) {

		var w = application.getActiveWindow();
		var noParameterErrorMessage;
		var startBlock = '-- ## SetParameterGeneratorForCode generated'; // セクション開始
		var sqlWk;	// ワーク用
		
		// パラメータ検索対象の文字列を設定
		if (w.selectedText) {
			// 選択中の文字列があるならそれを検索対象とする
			sqlWk = w.selectedText;
			noParameterErrorMessage = "選択文字列中にパラメータが存在しません。";
		} else {
			sqlWk = w.sql;
			noParameterErrorMessage = "SQL中にパラメータが存在しません。";
		}
		
		// コメントをブランクに置き換える（検索対象から外す）
		sqlWk = sqlWk.replace(new RegExp('(/\*.*?\*/)|(--.*?(\r\n|\n))','g'),'  ');

		// クォーテーションで囲まれた部分をブランクに置き換える（検索対象から外す）
		// 念のため正規表現ではなく愚直にやる
		var st = -1;
		var i = 0;
		while((i = sqlWk.indexOf("'",i)) !== -1) {
			// 囲みの始まり（かもしれない）クォーテーションを発見した
			if (sqlWk.charAt(i+1) == "'") {
				// 連続しているなら無視
				i += 2;	//インデックスを2つ進める
			} else {
				if (st == -1) {
					// 見つけたのが囲み開始のクォーテーションなら 
					st = i;
					i++;
				} else {
					// 見つけたのが囲み終了のクォーテーションなら囲まれている範囲をブランクに置き換える
					sqlWk = sqlWk.substr(0,st-1) + "  " + sqlWk.substr(i + 1);
					i = st + 2;
					st = -1;
				}
			}
		}
		
		// sql中からパラメータを探し列挙
		// ここではVBScriptの正規表現を使用する(exec()のgオプション使用時の後方参照に不具合らしきものを見つけたので）
		var regVbs = WScript.CreateObject("VBScript.RegExp");
		regVbs.pattern = '[^\w\-][@|:]([\w\-]+)';
		regVbs.global = true;
		regVbs.multiline = true;

		var pNames = [];	// SQL中に発見したパラメータ名の配列
		var ma = regVbs.execute(sqlWk);
		if (!isNull(ma)) {
			for(var i=0 ; i<ma.count ; i++) {
				if (!isUndefined(ma[i].submatches[0])) {
					var pn = ma[i].submatches[0];
					var existFlg = false;
					for (var j=0 ; j<pNames.length ; j++) {
						if (pNames[j] === pn) {
							// 既にパラメータ名が存在する
							existFlg = true;
							break;
						}
					}
					if (!existFlg) {
						pNames.push(pn);
					}
				}
			}
		}

		// DBに接続
		var conn = application.dbTree.getSelectedDatabaseConnection();

		var pTypes = [];
		var pComments = [];

		var tableArr = tables.split(',');
		var rs = null;

		for (t = 0; t < tableArr.length; t++) {
			try {
				rs = conn.getTableColumnList(tableArr[t].trim());
			} catch(e) {
				alert('テーブルが見つかりません。対象のDBに接続してください。');
				exit();
			}
			for (var i = 0; i < rs.length; i++) {
				for (var j = 0; j < pNames.length; j++) {
					if (rs[i].columnName == pNames[j]) {
						pTypes[j] = rs[i].dataType.replace(/\(.*/, '').replace(/ .*/, '');
						pComments[j] = rs[i].comment;
					}
				}
			}
		}


		var sources = [];
		var beginCommentIndexes = [];
		for(var i=0 ; i<pNames.length ; i++) {
			var pName = pNames[i];
			var pType = pTypes[i] != null ? pTypes[i] : '';
			var pComment = pComments[i] != null ? pComments[i] : '';
			
			sources[i] = source.replace(/\$Name/g, pName).replace(/\$Type/g, pType).replace(/\$Comment/g, pComment);
		}

		// ソースコードを整形
		var len         = sources.length;
		var maxIndex    = -1;
		var searchStr   = comment;
		var searchRegex = new RegExp(searchStr);

		for (var i = 0; i < len; i++) {
			beginCommentIndexes[i] = sources[i].search(searchStr);
			if (maxIndex < beginCommentIndexes[i]) {
				maxIndex = beginCommentIndexes[i];
			}
		}
		for (var i = 0; i < len; i++) {
			var spaceLength = maxIndex - beginCommentIndexes[i] + 1;
			if (spaceLength > 0) {
				sources[i] = sources[i].replace(searchRegex, new Array(spaceLength).join(' ') + searchStr);
			}
		}
		
		if (sources.length > 0) {
			Clipboard.asText = sources.join("\n");
			alert("クリップボードにソースコードを貼り付けました。");
		} else {
			alert(noParameterErrorMessage);
		}	
	}
}

(function(){
	var w = application.getActiveWindow();
	if (w.formType == "A5SqlEditor" ) {
		new Generator().process();
	} else {
		alert("SQLエディタのタブを選択して下さい。");
	}
})();